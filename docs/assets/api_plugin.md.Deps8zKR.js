import{_ as s,c as a,o as n,ae as l}from"./chunks/framework.DaxMzASw.js";const o=JSON.parse('{"title":"Plugin 插件系统","description":"","frontmatter":{},"headers":[],"relativePath":"api/plugin.md","filePath":"api/plugin.md"}'),e={name:"api/plugin.md"};function t(h,i,p,k,r,d){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="plugin-插件系统" tabindex="-1">Plugin 插件系统 <a class="header-anchor" href="#plugin-插件系统" aria-label="Permalink to &quot;Plugin 插件系统&quot;">​</a></h1><p>Mine Motion 的插件系统允许库轻松地扩展以支持各种数据类型的动画。插件是连接 Timeline 和 Handler 的桥梁，负责为不同类型的数据创建合适的 Handler。</p><h2 id="mineplugin" tabindex="-1">MinePlugin <a class="header-anchor" href="#mineplugin" aria-label="Permalink to &quot;MinePlugin&quot;">​</a></h2><p><code>MinePlugin</code> 是所有插件的基类，用于创建能处理特定数据类型动画的组件。</p><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h3><p>每个 <code>MinePlugin</code> 都实现了一个 <code>handle</code> 方法，该方法尝试根据提供的配置创建适当的 <code>MineHandler</code>。插件系统遵循&quot;责任链&quot;模式 - 当需要创建动画时，Mine Motion会依次尝试已注册的插件，直到找到能处理该数据类型的插件。</p><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>weight</td><td>number</td><td>插件的优先级，数值越高越先被尝试</td></tr></tbody></table><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="handle-config-minehandlerconfig-lt-any-gt-minehandler-cannotanimateerr" tabindex="-1">handle(config: <a href="/mine-motion/api/types.html#minehandlerconfig-lt-t-gt">MineHandlerConfig</a>&lt;any&gt;): <a href="/mine-motion/api/handler.html">MineHandler</a> | <a href="/mine-motion/api/types.html#cannotanimateerr">CanNotAnimateErr</a> <a class="header-anchor" href="#handle-config-minehandlerconfig-lt-any-gt-minehandler-cannotanimateerr" aria-label="Permalink to &quot;handle(config: [MineHandlerConfig](/api/types.html#minehandlerconfig-lt-t-gt)&amp;lt;any&amp;gt;): [MineHandler](/api/handler) | [CanNotAnimateErr](/api/types.html#cannotanimateerr)&quot;">​</a></h4><p>尝试创建一个Handler来处理指定的动画配置。</p><ul><li><strong>参数</strong>: 包含动画起始值、结束值、持续时间等信息的配置对象</li><li><strong>返回值</strong>: 成功时返回一个Handler实例，失败时返回 <code>CanNotAnimateErr</code>（即<code>false</code>）</li></ul><h3 id="插件实现示例" tabindex="-1">插件实现示例 <a class="header-anchor" href="#插件实现示例" aria-label="Permalink to &quot;插件实现示例&quot;">​</a></h3><p>下面是处理数字类型动画的 <code>MNumberPlugin</code> 的简化实现：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MNumberPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MinePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置较高优先级</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检查是否能处理这种类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CanNotAnimateErr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建并返回适当的Handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MNumberHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="minepluginmanager" tabindex="-1">MinePluginManager <a class="header-anchor" href="#minepluginmanager" aria-label="Permalink to &quot;MinePluginManager&quot;">​</a></h2><p><code>MinePluginManager</code> 是一个单例，负责管理所有注册的插件并为动画请求找到合适的Handler。</p><h3 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="register-plugin-mineplugin" tabindex="-1">register(plugin: <a href="/mine-motion/api/plugin.html#mineplugin">MinePlugin</a>) <a class="header-anchor" href="#register-plugin-mineplugin" aria-label="Permalink to &quot;register(plugin: [MinePlugin](/api/plugin#mineplugin))&quot;">​</a></h4><p>注册一个新插件到管理器。</p><ul><li><strong>参数</strong>: 要注册的插件实例</li></ul><h4 id="gethandler-config-minehandlerconfig-lt-any-gt-minehandler-cannotanimateerr" tabindex="-1">getHandler(config: <a href="/mine-motion/api/types.html#minehandlerconfig-lt-t-gt">MineHandlerConfig</a>&lt;any&gt;): <a href="/mine-motion/api/handler.html">MineHandler</a> | <a href="/mine-motion/api/types.html#cannotanimateerr">CanNotAnimateErr</a> <a class="header-anchor" href="#gethandler-config-minehandlerconfig-lt-any-gt-minehandler-cannotanimateerr" aria-label="Permalink to &quot;getHandler(config: [MineHandlerConfig](/api/types.html#minehandlerconfig-lt-t-gt)&amp;lt;any&amp;gt;): [MineHandler](/api/handler) | [CanNotAnimateErr](/api/types.html#cannotanimateerr)&quot;">​</a></h4><p>尝试为指定的动画配置找到合适的Handler。</p><ul><li><strong>参数</strong>: 包含动画配置信息的对象</li><li><strong>返回值</strong>: 成功时返回一个Handler实例，失败时返回 <code>CanNotAnimateErr</code></li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册自定义插件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyColorPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MinePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (config.start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ColorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册到管理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MinePluginManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyColorPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在Mine Motion可以为Color类型创建动画了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myObject, [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { color: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { color: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) } }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><h3 id="内置插件" tabindex="-1">内置插件 <a class="header-anchor" href="#内置插件" aria-label="Permalink to &quot;内置插件&quot;">​</a></h3><p>Mine Motion内置了以下插件：</p><ul><li><code>MNumberPlugin</code>: 处理数字类型动画（如位置、不透明度、大小等）</li></ul><p>你可以根据需要创建自定义插件来扩展Mine Motion支持更多的数据类型，如颜色、路径、复杂对象等。</p>`,30)]))}const E=s(e,[["render",t]]);export{o as __pageData,E as default};

import{_ as t,c as n,ae as a,j as s,o as l}from"./chunks/framework.DqPuTaCH.js";const g=JSON.parse('{"title":"数据驱动动画","description":"","frontmatter":{},"headers":[],"relativePath":"api/datadriver.md","filePath":"api/datadriver.md"}'),e={name:"api/datadriver.md"};function h(p,i,k,d,r,E){return l(),n("div",null,i[0]||(i[0]=[a(`<h1 id="数据驱动动画" tabindex="-1">数据驱动动画 <a class="header-anchor" href="#数据驱动动画" aria-label="Permalink to &quot;数据驱动动画&quot;">​</a></h1><p>Mine Motion 不仅支持基于时间的动画，还提供了强大的数据驱动功能。数据驱动允许你将动画进度与任何数值型数据源绑定，使动画能够响应用户交互、滚动位置或其他数据变化。</p><h2 id="mdatadriver-类" tabindex="-1">MDataDriver 类 <a class="header-anchor" href="#mdatadriver-类" aria-label="Permalink to &quot;MDataDriver 类&quot;">​</a></h2><p><code>MDataDriver</code> 是 Mine Motion 的数据驱动器，它接收一个响应式数值，并将其映射为动画的进度。</p><h3 id="创建数据驱动器" tabindex="-1">创建数据驱动器 <a class="header-anchor" href="#创建数据驱动器" aria-label="Permalink to &quot;创建数据驱动器&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, MineTimeline, MDataDriver } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mine-motion&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建响应式数据源(0到1之间)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建数据驱动的时间轴</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MineTimeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  driver: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MDataDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(progress),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  autoStop: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 数据驱动通常不需要自动停止</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element, [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制动画进度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">progress.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动画移动到50%位置</span></span></code></pre></div><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MDataDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>Ref&lt;number&gt;</td><td>响应式数值数据源</td></tr><tr><td>config?</td><td>MDataDriverConfig</td><td>可选的配置对象</td></tr></tbody></table><h3 id="配置选项" tabindex="-1">配置选项 <a class="header-anchor" href="#配置选项" aria-label="Permalink to &quot;配置选项&quot;">​</a></h3><p><code>MDataDriverConfig</code> 包含以下选项：</p>`,12),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"属性"),s("th",null,"类型"),s("th",null,"默认值"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"scale?"),s("td",null,"number"),s("td",null,"1"),s("td",null,"数据值到时间的缩放比例")]),s("tr",null,[s("td",null,"damping?"),s("td",null,"MDataDriverDampingConfig"),s("td",{"enabled:":"",false:""}),s("td",null,"平滑过渡的阻尼配置")])])],-1),a(`<h3 id="阻尼配置" tabindex="-1">阻尼配置 <a class="header-anchor" href="#阻尼配置" aria-label="Permalink to &quot;阻尼配置&quot;">​</a></h3><p><code>MDataDriverDampingConfig</code> 用于平滑数据变化，防止动画过于生硬：</p><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>enabled</td><td>boolean</td><td>false</td><td>是否启用阻尼效果</td></tr><tr><td>halflife</td><td>number</td><td>0</td><td>阻尼半衰期(数值越大过渡越平滑)</td></tr><tr><td>deltaMs</td><td>number</td><td>7</td><td>阻尼更新间隔(毫秒)</td></tr></tbody></table><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><h3 id="数据映射" tabindex="-1">数据映射 <a class="header-anchor" href="#数据映射" aria-label="Permalink to &quot;数据映射&quot;">​</a></h3><p>你可以使用<code>scale</code>参数调整数据与时间的映射关系：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将0-100的数据映射到0-1的动画进度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MDataDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(largeValue, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 除以100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="平滑过渡" tabindex="-1">平滑过渡 <a class="header-anchor" href="#平滑过渡" aria-label="Permalink to &quot;平滑过渡&quot;">​</a></h3><p>对于快速变化的数据，使用阻尼效果创建更平滑的动画：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MDataDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jumpyData, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  damping: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    halflife: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数值越大过渡越平滑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deltaMs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 约60fps的更新频率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,10)]))}const c=t(e,[["render",h]]);export{g as __pageData,c as default};

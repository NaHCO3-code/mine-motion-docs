import{_ as a,c as s,o as n,ae as e}from"./chunks/framework.DaxMzASw.js";const g=JSON.parse('{"title":"概览","description":"","frontmatter":{},"headers":[],"relativePath":"api/overview.md","filePath":"api/overview.md"}'),t={name:"api/overview.md"};function l(h,i,p,r,o,k){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h1><p>Mine Motion 是一个轻量级的 JavaScript/TypeScript 动画库，专注于提供简洁而强大的API来创建流畅的动画效果。本文将帮助你理解 Mine Motion 的核心概念和工作原理。</p><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><p>Mine Motion 的设计基于以下几个核心概念：</p><ol><li><strong>时间轴(Timeline)</strong>：动画的容器，管理多个动画的播放、暂停和进度控制</li><li><strong>处理器(Handler)</strong>：描述单个动画属性变化的基本单位</li><li><strong>插件(Plugin)</strong>：处理特定类型数据动画的扩展组件</li><li><strong>响应式(Reactive)</strong>：实现数据绑定和自动更新的系统</li><li><strong>驱动器(Driver)</strong>：控制动画时间流动的机制</li></ol><h2 id="handler-lt-t-gt" tabindex="-1"><a href="/mine-motion/api/handler.html">Handler</a>&lt;T&gt; <a class="header-anchor" href="#handler-lt-t-gt" aria-label="Permalink to &quot;[Handler](/api/handler)&amp;lt;T&amp;gt;&quot;">​</a></h2><p><code>MineHandler</code> 是 Mine Motion 中最基础的组件，它描述了一个属性如何从起始值变化到结束值。每个 Handler 负责一个属性的动画过程，包含以下关键信息：</p><ul><li><strong>起始值(start)</strong>: 动画开始时的属性值</li><li><strong>结束值(end)</strong>: 动画结束时的属性值</li><li><strong>持续时间(duration)</strong>: 动画的时长(毫秒)</li><li><strong>设置器(setter)</strong>: 用于更新属性值的函数</li><li><strong>缓动函数(ease)</strong>: 控制动画速度变化的函数</li></ul><p>在使用 Mine Motion 时，你通常不需要直接创建 Handler 对象，因为 <code>MineTimeline</code> 的方法(如 <code>animate</code>、<code>to</code> 或 <code>fromTo</code>)会自动创建并管理它们。但了解 Handler 的概念有助于你理解 Mine Motion 如何工作。</p><h2 id="plugin" tabindex="-1"><a href="/mine-motion/api/plugin.html">Plugin</a> <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;[Plugin](/api/plugin)&quot;">​</a></h2><p><code>MinePlugin</code> 系统使 Mine Motion 能够处理多种类型的数据动画。例如，数字类型的线性插值由内置的 <code>MNumberPlugin</code> 处理。</p><p>插件系统的主要优势在于：</p><ul><li><strong>可扩展性</strong>: 你可以创建自定义插件来支持新的数据类型</li><li><strong>模块化</strong>: 核心功能和特定类型处理逻辑分离</li><li><strong>自动选择</strong>: 根据动画数据类型自动选择合适的插件</li></ul><p>Mine Motion 内置了基础插件(如数字插值)，并可以通过 <code>MinePluginManager</code> 注册新插件。</p><h2 id="timeline" tabindex="-1"><a href="/mine-motion/api/timeline.html">Timeline</a> <a class="header-anchor" href="#timeline" aria-label="Permalink to &quot;[Timeline](/api/timeline)&quot;">​</a></h2><p><code>MineTimeline</code> 是创建和控制动画的主要接口。它提供了直观的方法来定义动画：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建时间轴</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MineTimeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myObject, [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { value: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 播放动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Timeline 还支持更多高级功能，如时间控制、播放速度调整、暂停和恢复等。</p><h2 id="响应式系统" tabindex="-1"><a href="/mine-motion/api/reactive.html">响应式系统</a> <a class="header-anchor" href="#响应式系统" aria-label="Permalink to &quot;[响应式系统](/api/reactive)&quot;">​</a></h2><p>Mine Motion 包含一个轻量级的响应式系统，支持数据绑定和自动更新。这使你可以创建基于数据变化的动画，而不仅仅是基于时间的动画。</p><h2 id="数据驱动" tabindex="-1"><a href="/mine-motion/api/datadriver.html">数据驱动</a> <a class="header-anchor" href="#数据驱动" aria-label="Permalink to &quot;[数据驱动](/api/datadriver)&quot;">​</a></h2><p>除了基于时间的动画外，Mine Motion 还支持基于数据的动画驱动。这意味着你可以将动画进度绑定到任何数值数据源，实现如基于滚动位置、用户输入或其他动态数据的动画效果。</p>`,22)]))}const c=a(t,[["render",l]]);export{g as __pageData,c as default};

import{_ as s,c as a,ae as t,o as e}from"./chunks/framework.DqPuTaCH.js";const E=JSON.parse('{"title":"Handler","description":"","frontmatter":{},"headers":[],"relativePath":"api/handler.md","filePath":"api/handler.md"}'),n={name:"api/handler.md"};function l(h,i,r,d,k,p){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="handler" tabindex="-1">Handler <a class="header-anchor" href="#handler" aria-label="Permalink to &quot;Handler&quot;">​</a></h1><h2 id="minehandler-lt-t-gt" tabindex="-1">MineHandler&lt;T&gt; <a class="header-anchor" href="#minehandler-lt-t-gt" aria-label="Permalink to &quot;MineHandler&amp;lt;T&amp;gt;&quot;">​</a></h2><p><code>MineHandler</code> 是 Mine Motion 的核心组件，负责处理单个属性从起始值到结束值的动画过渡。它是一个抽象类，不同类型的数据需要通过不同的 Handler 实现来处理。</p><h3 id="何时使用handler" tabindex="-1">何时使用Handler <a class="header-anchor" href="#何时使用handler" aria-label="Permalink to &quot;何时使用Handler&quot;">​</a></h3><p>在大多数情况下，你不需要直接创建或操作 Handler 对象，因为 Mine Motion 会自动为你创建合适的Handler。但了解 Handler 的工作原理有助于：</p><ol><li>理解 Mine Motion 如何处理动画</li><li>创建自定义的特殊动画效果</li><li>扩展 Mine Motion 支持新的数据类型</li></ol><h3 id="核心属性" tabindex="-1">核心属性 <a class="header-anchor" href="#核心属性" aria-label="Permalink to &quot;核心属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>any</td><td>动画的起始值</td></tr><tr><td>end</td><td>any</td><td>动画的结束值</td></tr><tr><td>duration</td><td>number</td><td>动画的持续时间（毫秒）</td></tr><tr><td>setter</td><td><a href="/mine-motion/api/types.html#setter-lt-t-gt">Setter</a>&lt;T&gt;</td><td>用于更新属性当前值的函数</td></tr><tr><td>ease</td><td><a href="/mine-motion/api/types.html#easefunc">EaseFunc</a></td><td>控制动画变化曲线的函数</td></tr></tbody></table><h3 id="核心方法" tabindex="-1">核心方法 <a class="header-anchor" href="#核心方法" aria-label="Permalink to &quot;核心方法&quot;">​</a></h3><h4 id="seek-time-number-void" tabindex="-1">seek(time: number): void <a class="header-anchor" href="#seek-time-number-void" aria-label="Permalink to &quot;seek(time: number): void&quot;">​</a></h4><p><code>seek</code> 方法是 Handler 的核心，它根据当前时间计算属性应该的值，并通过 setter 更新属性。</p><ul><li><strong>time</strong>: 相对于动画开始时间的毫秒数（0到duration之间）</li><li>当 time = 0 时，属性值为start</li><li>当 time = duration 时，属性值为end</li><li>中间值由 ease 函数控制过渡曲线</li></ul><h3 id="如何工作" tabindex="-1">如何工作 <a class="header-anchor" href="#如何工作" aria-label="Permalink to &quot;如何工作&quot;">​</a></h3><p>每个 Handler 实例负责一个具体属性的动画。当 Timeline 的时间更新时，它会调用所有 Handler 的 seek 方法，传入相对于 Handler 开始时间的当前时间。Handler 会：</p><ol><li>根据 ease 函数计算当前进度（0到1之间）</li><li>根据进度插值计算当前值</li><li>调用 setter 函数更新属性值</li></ol><h3 id="实现示例" tabindex="-1">实现示例 <a class="header-anchor" href="#实现示例" aria-label="Permalink to &quot;实现示例&quot;">​</a></h3><p>下面是 <code>MNumberHandler</code>（处理数字类型）的简化实现：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MNumberHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MineHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  seek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算进度（0-1之间）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.duration, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 应用缓动函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eased</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(progress);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算当前值并更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.start) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eased;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="自定义handler" tabindex="-1">自定义Handler <a class="header-anchor" href="#自定义handler" aria-label="Permalink to &quot;自定义Handler&quot;">​</a></h3><p>如果你需要创建自定义Handler，需要继承 <code>MineHandler</code> 并实现 <code>seek</code> 方法。然后通过创建相应的 Plugin 使 Mine Motion 能够自动使用你的 Handler。</p>`,20)]))}const g=s(n,[["render",l]]);export{E as __pageData,g as default};

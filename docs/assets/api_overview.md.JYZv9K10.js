import{_ as a,c as i,a0 as n,o}from"./chunks/framework.DTE-IoAj.js";const s=JSON.parse('{"title":"概览","description":"","frontmatter":{},"headers":[],"relativePath":"api/overview.md","filePath":"api/overview.md"}'),t={name:"api/overview.md"};function d(l,e,r,c,p,h){return o(),i("div",null,e[0]||(e[0]=[n('<h1 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h1><p>在这篇文章中，你讲了解到 MineMotion 的内部运作原理，以便帮助你更好地看懂 API。</p><h2 id="handler-lt-t-gt" tabindex="-1"><a href="/mine-motion/api/handler.html">Handler</a>&lt;T&gt; <a class="header-anchor" href="#handler-lt-t-gt" aria-label="Permalink to &quot;[Handler](/api/handler)&amp;lt;T&amp;gt;&quot;">​</a></h2><p>MineHandler 是一个抽象类，同时也是 MineMotion 中描述一个动画最基本的单位。</p><p>通常，在使用 MineMotion 时你不会感觉到它的存在，因为其已经被 <code>MineTimeline</code> 等对象进行了很好的包装。在使用 <code>MineTimeline</code> 的一些方法（比如 <code>animate</code> 方法）时，会自动根据需要创建许多 <code>MineHandler</code> 对象。但是，如果你需要创建一些罕见的动画效果，你可能需要手动创建 <code>MineHandler</code> 对象，并且使用一些方法（例如 <code>MineTimeline.applyHandler</code>）让它们与正常的动画协同工作。</p><h2 id="plugin" tabindex="-1"><a href="/mine-motion/api/plugin.html">Plugin</a> <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;[Plugin](/api/plugin)&quot;">​</a></h2><p>有些动画效果比较通用，比如数字的线性插值，或者颜色值的线性插值。为了方便使用，MineMotion 提供了一个名为 <code>MinePlugin</code> 的抽象类，用于描述一些通用的动画效果。这些 <code>MinePlugin</code> 由 <code>MinePluginManager</code> 进行管理。</p><p>MineMotion 提供了一些基本的 <code>MinePlugin</code>，当前有 <code>MNumberPlugin</code> 用于数字的线性插值。</p>',8)]))}const u=a(t,[["render",d]]);export{s as __pageData,u as default};
